#!/usr/bin/env node

/**
 * Module dependency
 */

const program = require('commander')
const path = require('path')
const vfs = require('vinyl-fs')
const chalk = require('chalk')
const fs = require('fs')
const Cucumber = require('cucumber')

function pathMapObj(type, param) {
    return {
        'index': {
            input: './demo/index.vue',
            output: path.resolve(`./src/entries/${type}/pages/${param}`)
        },
        'actions': {
            input: './demo/action/*',
            output: path.resolve(`./src/entries/${type}/store/${param}`)
        },
        'api': {
            input: './demo/api.js',
            output: path.resolve(`./src/api/${type}`)
        } 
    }
}

/**
 * 
 * @param {输入路径} input 
 * @param {输出路径} output 
 * @param {类型} type 
 * @param {是否需要重命名} needRename 
 * @param {模块名} moduleName 
 */
function readAndWrite(input, output, type, needRename, moduleName) {
    vfs.src([input])
    .pipe(vfs.dest(output, {}))
    .on('end', function () {
        console.log(chalk.green(`initializing ${type} file finished......`))
        if (needRename) {
            fs.renameSync(`${output}/api.js`, `${output}/${moduleName}.js`)
        }
    })
    .resume()
}

program.version('1.0.0')
    .option('-t --teacher [name]', 'init the teacher component')
    .option('-s --student [name]', 'init the student component')
    .option('-m --manager [name]', 'init the manager component')
    .parse(process.argv)

let param = program.teacher || program.student || program.manager 
if (param) {
    let type = null;
    if (program.teacher) {
        type = 'teacher'
    } else if (program.student) {
        type = 'student'
    } else if (program.manager) {
        type = 'manager'
    }
    if (param.toString() === 'true') {
        console.log(chalk.red('格式错误！缺少组件名参数'))
        return
    }

    console.log(`The ${chalk.blue(param)} component will be inited on ${chalk.yellow(__dirname)}`)
    console.log(chalk.yellow('initializing specified component......'))

    readAndWrite(pathMapObj(type, param).index.input, pathMapObj(type, param).index.output, 'index')
    readAndWrite(pathMapObj(type, param).actions.input, pathMapObj(type, param).actions.output, 'actions')
    readAndWrite(pathMapObj(type, param).api.input, pathMapObj(type, param).api.output, 'api', true, param)

} else {
    console.log(chalk.red('格式错误！正确命令举例：node ./bin/init-project -t component-name'))
}
